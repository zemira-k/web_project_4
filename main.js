!function(){"use strict";var e={inputSelector:".form__input",submitButtonSelector:".form__button",inactiveButtonClass:"form__button_disabled",inputErrorClass:"form__input_type_error",errorClass:"form__input-error_active"},t=document.querySelector(".popup_type_edit"),n=document.querySelector(".popup_type_add"),r=document.querySelector(".popup_type_edit-avatar"),o=document.querySelector(".profile__editbutton_type_avatar"),i=document.querySelector(".profile__editbutton_type_data"),a=document.querySelector(".profile__big-rectangle"),u=document.querySelector(".form__input_type_name"),c=document.querySelector(".form__input_type_about");function l(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var s=function(e,t){return fetch(e,t).then((function(e){return e.ok?e.json():Promise.reject(e.statusText)}))},f=new(function(){function e(t){var n=t.baseUrl,r=t.options;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._url=n,this._options=r}var t,n;return t=e,(n=[{key:"getInitialCards",value:function(){return s("".concat(this._url,"/cards"),{headers:this._options})}},{key:"getUserInfo",value:function(){return s("".concat(this._url,"/users/me"),{headers:this._options})}},{key:"editProfile",value:function(e){return s("".concat(this._url,"/users/me"),{headers:this._options,method:"PATCH",body:JSON.stringify({name:e.formName,about:e.formAbout})})}},{key:"addCard",value:function(e){return s("".concat(this._url,"/cards"),{headers:this._options,method:"POST",body:JSON.stringify(e)})}},{key:"deleteCard",value:function(e){return s("".concat(this._url,"/cards/").concat(e),{headers:this._options,method:"DELETE"})}},{key:"addLike",value:function(e){return s("".concat(this._url,"/cards/likes/").concat(e),{headers:this._options,method:"PUT"})}},{key:"deleteLike",value:function(e){return s("".concat(this._url,"/cards/likes/").concat(e),{headers:this._options,method:"DELETE"})}},{key:"updateProfileImage",value:function(e){return s("".concat(this._url,"/users/me/avatar"),{headers:this._options,method:"PATCH",body:JSON.stringify({avatar:e})})}}])&&l(t.prototype,n),e}())({baseUrl:"https://around.nomoreparties.co/v1/group-12",options:{authorization:"f0ace597-b017-4eaf-8da3-94e369745d83","Content-Type":"application/json"}});function p(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var d=function(){function e(t,n,r){var o=t.data,i=t.handleCardClick,a=t.handleLikeClick,u=t.handleDeleteCard;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._name=o.name,this._link=o.link,this._id=o._id,this._userId=r,this._ownerId=o.owner._id,this._likes=o.likes,this._cardSelector=n,this._handleCardClick=i,this._handleLikeClick=a,this._handleDeleteCard=u}var t,n;return t=e,(n=[{key:"_getTemplate",value:function(){return document.querySelector(this._cardSelector).content.querySelector(".element").cloneNode(!0)}},{key:"_setEventListeners",value:function(){var e=this;this._element.querySelector(".element__name-heart").addEventListener("click",(function(){return e._handleLikeClick(e._id)})),this._element.querySelector(".element__btn_type_image").addEventListener("click",(function(){return e._handleCardClick()})),this._element.querySelector(".element__btn_type_trash").addEventListener("click",(function(){return e._handleDeleteCard(e._id)}))}},{key:"_renderLikes",value:function(){this._element.querySelector(".element__name-number").textContent=this._likes.length,this.isLiked()?this._element.querySelector(".element__name-heart").classList.add("element__name-heart_type_black"):this._element.querySelector(".element__name-heart").classList.remove("element__name-heart_type_black")}},{key:"removeCard",value:function(){this._ownerId===this._userId&&(this._element.remove(),this._element=null)}},{key:"likeCard",value:function(e){this._likes=e,this._renderLikes()}},{key:"isLiked",value:function(){var e=this;return this._likes.some((function(t){return t._id===e._userId}))}},{key:"getCard",value:function(){return this._element=this._getTemplate(),this._setEventListeners(),this._ownerId!==this._userId&&(this._element.querySelector(".element__trash").style.display="none"),this._element.querySelector(".element__item").src=this._link,this._element.querySelector(".element__item").alt=this._name,this._element.querySelector(".element__name-text").textContent=this._name,this._renderLikes(),this._element}}])&&p(t.prototype,n),e}();function _(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var h=function e(t,n){var r=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),_(this,"_showInputError",(function(e){var t=r._settings,n=t.inputErrorClass,o=t.errorClass,i=e.validationMessage,a=r._formElement.querySelector("#".concat(e.id,"-error"));a.textContent=i,e.classList.add(n),a.classList.add(o)})),_(this,"_hideInputError",(function(e){var t=r._settings,n=t.inputErrorClass,o=t.errorClass;e.classList.remove(n);var i=r._formElement.querySelector("#".concat(e.id,"-error"));i.classList.remove(o),i.textContent=""})),_(this,"_checkInputValidity",(function(e){e.validity.valid?r._hideInputError(e):r._showInputError(e)})),_(this,"_toggleButtonState",(function(){var e=r._settings.inactiveButtonClass;r._inputList.every((function(e){return e.validity.valid}))?(r._buttonElement.disabled=!1,r._buttonElement.classList.remove(e)):(r._buttonElement.disabled="disabled",r._buttonElement.classList.add(e))})),_(this,"resetValidation",(function(){r._inputList.forEach((function(e){r._hideInputError(e)})),r._toggleButtonState()})),_(this,"enableValidation",(function(){r._inputList.forEach((function(e){e.addEventListener("input",(function(){r._checkInputValidity(e),r._toggleButtonState()}))}))})),this._settings=t,this._formElement=n,this._submitButtonSelector=t.submitButtonSelector,this._buttonElement=this._formElement.querySelector(this._submitButtonSelector),this._inputSelector=t.inputSelector,this._inputList=Array.from(this._formElement.querySelectorAll(this._inputSelector))};function y(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var m=function(){function e(t,n){var r=t.renderer;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._renderer=r,this._cardsContainer=document.querySelector(n)}var t,n;return t=e,(n=[{key:"renderItems",value:function(e){e.forEach(this._renderer)}},{key:"addItem",value:function(e){this._cardsContainer.append(e)}}])&&y(t.prototype,n),e}();function v(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function b(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var g=function(){function e(t){var n=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),b(this,"_handleEscClose",(function(e){"Escape"===e.key&&n.close()})),b(this,"_handleClickPopupOverlayClose",(function(e){e.target===n._popupElement&&n.close()})),this._popupElement=document.querySelector(t)}var t,n;return t=e,(n=[{key:"open",value:function(){this._popupElement.classList.add("popup_opened"),document.addEventListener("keydown",this._handleEscClose),document.addEventListener("click",this._handleClickPopupOverlayClose)}},{key:"close",value:function(){this._popupElement.classList.remove("popup_opened"),document.removeEventListener("keydown",this._handleEscClose),document.removeEventListener("click",this._handleClickPopupOverlayClose)}},{key:"setEventListeners",value:function(){var e=this;this._popupElement.addEventListener("click",(function(t){t.target.classList.contains("popup__close")&&e.close()}))}}])&&v(t.prototype,n),e}();function k(e){return k="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},k(e)}function E(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function w(e,t,n){return w="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=L(e)););return e}(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(n):o.value}},w(e,t,n||e)}function S(e,t){return S=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},S(e,t)}function C(e,t){if(t&&("object"===k(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function L(e){return L=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},L(e)}var O=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&S(e,t)}(a,e);var t,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=L(r);if(o){var n=L(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return C(this,e)});function a(e){var t,n=e.popupSelector,r=e.submitHandler;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),(t=i.call(this,n))._submitHandler=r,t._form=t._popupElement.querySelector(".form"),t._inputs=Array.from(t._form.querySelectorAll(".form__input")),t._formButton=t._popupElement.querySelector(".form__button"),t}return t=a,(n=[{key:"renderLoading",value:function(e){this._formButton.textContent=e?"saving...":this._formButton.value}},{key:"_getInputValues",value:function(){var e=this;return this._inputValues={},this._inputs.forEach((function(t){return e._inputValues[t.name]=t.value})),this._inputValues}},{key:"setEventListeners",value:function(){var e=this;this._popupElement.addEventListener("submit",(function(t){t.preventDefault(),e.renderLoading(!0),e._submitHandler(e._getInputValues())})),w(L(a.prototype),"setEventListeners",this).call(this)}},{key:"close",value:function(){this._form.reset(),w(L(a.prototype),"close",this).call(this)}}])&&E(t.prototype,n),a}(g);function j(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var P=function(){function e(t,n,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._name=document.querySelector(t),this._job=document.querySelector(n),this._avatar=document.querySelector(r)}var t,n;return t=e,(n=[{key:"getUserInfo",value:function(){return{name:this._name.textContent,job:this._job.textContent}}},{key:"setUserInfo",value:function(e){var t=e.formName,n=e.formAbout,r=e.formLink;this._name.textContent=t,this._job.textContent=n,this._avatar.style.backgroundImage="url(".concat(r,")")}}])&&j(t.prototype,n),e}();function I(e){return I="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},I(e)}function q(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function R(e,t,n){return R="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=A(e)););return e}(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(n):o.value}},R(e,t,n||e)}function T(e,t){return T=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},T(e,t)}function x(e,t){if(t&&("object"===I(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function A(e){return A=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},A(e)}var B=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&T(e,t)}(a,e);var t,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=A(r);if(o){var n=A(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return x(this,e)});function a(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),(t=i.call(this,e))._imageElement=t._popupElement.querySelector(".popup__image"),t._captionElement=t._popupElement.querySelector(".popup__caption"),t}return t=a,(n=[{key:"open",value:function(e){this._imageElement.src=e.link,this._imageElement.alt=e.name,this._captionElement.textContent=e.name,R(A(a.prototype),"open",this).call(this)}}])&&q(t.prototype,n),a}(g);function V(e){return V="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},V(e)}function D(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function U(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function H(e,t,n){return H="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=M(e)););return e}(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(n):o.value}},H(e,t,n||e)}function N(e,t){return N=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},N(e,t)}function J(e,t){if(t&&("object"===V(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function M(e){return M=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},M(e)}var z=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&N(e,t)}(a,e);var t,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=M(r);if(o){var n=M(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return J(this,e)});function a(){return D(this,a),i.apply(this,arguments)}return t=a,(n=[{key:"setAction",value:function(e){this._submitHandler=e}},{key:"setEventListeners",value:function(){var e=this;this._popupElement.addEventListener("submit",(function(t){t.preventDefault(),e._submitHandler()})),H(M(a.prototype),"setEventListeners",this).call(this)}}])&&U(t.prototype,n),a}(g);function $(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var F,G=new h(e,r),K=new h(e,t),Q=new h(e,n),W=new P(".profile__name",".profile__task",".profile__avatar");Promise.all([f.getInitialCards(),f.getUserInfo()]).then((function(e){var t,n,r=(n=2,function(e){if(Array.isArray(e))return e}(t=e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i=[],a=!0,u=!1;try{for(n=n.call(e);!(a=(r=n.next()).done)&&(i.push(r.value),!t||i.length!==t);a=!0);}catch(e){u=!0,o=e}finally{try{a||null==n.return||n.return()}finally{if(u)throw o}}return i}}(t,n)||function(e,t){if(e){if("string"==typeof e)return $(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?$(e,t):void 0}}(t,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),o=r[0],i=r[1];F=i._id,X.renderItems(o),W.setUserInfo({formName:i.name,formAbout:i.about,formLink:i.avatar})})).catch((function(e){return console.log("Error: ".concat(e))}));var X=new m({renderer:ne},".elements"),Y=new B(".popup_type_image"),Z=new z(".popup_type_delete-card"),ee=new O({popupSelector:".popup_type_edit",submitHandler:function(e){f.editProfile(e).then((function(e){W.setUserInfo({formName:e.name,formAbout:e.about,formLink:e.avatar})})).then((function(){ee.close()})).catch((function(e){return console.log("Error: ".concat(e))})).finally((function(){ee.renderLoading(!1)}))}}),te=new O({popupSelector:".popup_type_edit-avatar",submitHandler:function(e){f.updateProfileImage(e.avatarImageLink).then((function(e){W.setUserInfo({formName:e.name,formAbout:e.about,formLink:e.avatar})})).then((function(){te.close()})).catch((function(e){return console.log("Error: ".concat(e))})).finally((function(){te.renderLoading(!1)}))}});function ne(e){var t=new d({data:e,handleCardClick:function(){Y.open(e)},handleLikeClick:function(e){t.isLiked()?f.deleteLike(e).then((function(e){t.likeCard(e.likes)})).catch((function(e){return console.log("Error: ".concat(e))})):f.addLike(e).then((function(e){t.likeCard(e.likes)})).catch((function(e){return console.log("Error: ".concat(e))}))},handleDeleteCard:function(e){Z.open(),Z.setAction((function(){f.deleteCard(e).then((function(e){t.removeCard(),Z.close()})).catch((function(e){return console.log("Error: ".concat(e))}))}))}},".card-template",F);X.addItem(t.getCard())}var re=new O({popupSelector:".popup_type_add",submitHandler:function(e){f.addCard({name:e.formTitle,link:e.formLink}).then((function(e){ne(e),re.close()})).then((function(){re.close()})).catch((function(e){return console.log("Error: ".concat(e))})).finally((function(){re.renderLoading(!1)}))}});a.addEventListener("click",(function(){Q.resetValidation(),re.open()})),i.addEventListener("click",(function(){var e;e=W.getUserInfo(),u.value=e.name,c.value=e.job,K.resetValidation(),ee.open()})),o.addEventListener("click",(function(){G.resetValidation(),te.open()})),K.enableValidation(),Q.enableValidation(),G.enableValidation(),ee.setEventListeners(),te.setEventListeners(),Y.setEventListeners(),re.setEventListeners(),Z.setEventListeners()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,